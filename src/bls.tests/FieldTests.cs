using chia.dotnet.bls;
using System.Numerics;

namespace bls.tests;

public class FieldsTests
{
    private readonly Fq a;
    private readonly Fq b;
    private readonly Fq2 c;
    private readonly Fq2 d;
    private readonly IFq e;
    private readonly IFq f;
    private readonly Fq6 g;
    private readonly Fq6 h;
    private readonly Fq12 i;
    private readonly Fq6 j;
    private readonly Fq6 j2;

    public FieldsTests()
    {
        a = new Fq(17, 30);
        b = new Fq(17, -18);
        c = new Fq2(17, a, b);
        d = new Fq2(17, a.Add(a), new Fq(17, -5));
        e = c.Multiply(d);
        f = e.Multiply(d);
        g = new(17, c, d, (Fq2)d.Multiply(d).Multiply(c));
        h = new(
            17,
            (Fq2)a.Add(a.Multiply(c)),
            (Fq2)c.Multiply(b).Multiply(a),
            (Fq2)b.Multiply(b).Multiply(d).Multiply(new Fq(17, 21))
        );
        i = new(17, g, h);
        j = new Fq6(
            17,
            (Fq2)a.Add(a.Multiply(c)),
            (Fq2)Fq2.Nil.Zero(17),
            (Fq2)Fq2.Nil.Zero(17)
        );
        j2 = new Fq6(
            17,
            (Fq2)a.Add(a.Multiply(c)),
            (Fq2)Fq2.Nil.Zero(17),
            (Fq2)Fq2.Nil.One(17)
        );
    }

    [Fact]
    public void BasicMultiplication()
    {
        Assert.NotEqual(f, e);
    }

    [Fact]
    public void SquareAndRoot()
    {
        var e_sq = e.Multiply(e);
        var e_sqrt = e_sq.ModSqrt();
        var e_pow = e_sqrt.Pow(2);
        Assert.True(e_pow.Equals(e_sq));
    }

    [Fact]
    public void Inequality()
    {
        Fq a2 = new(BigInteger.Parse("172487123095712930573140951348"), BigInteger.Parse("3012492130751239573498573249085723940848571098237509182375"));
        Fq b2 = new(BigInteger.Parse("172487123095712930573140951348"), BigInteger.Parse("3432984572394572309458723045723849"));
        Fq2 c2 = new(BigInteger.Parse("172487123095712930573140951348"), a2, b2);

        Assert.False(b2.Equals(c2));
    }

    [Fact]
    public void DoubleNegation()
    {
        Fq6 h = new(
            17,
            (Fq2)a.Add(a.Multiply(c)),
            (Fq2)c.Multiply(b).Multiply(a),
            (Fq2)b.Multiply(b).Multiply(d).Multiply(new Fq(17, 21))
        );
        Fq12 i = new(17, g, h);

        Assert.True(i.Inverse().Inverse().Equals(i));
    }

    [Fact]
    public void InverseRootIdentity()
    {
        Assert.True(i.Root.Inverse().Multiply(i.Root).Equals(Fq6.Nil.One(17)));
    }

    [Fact]
    public void InverseIdentity()
    {
        var x = new Fq12(17, (Fq6)Fq6.Nil.Zero(17), (Fq6)i.Root);

        Assert.True(x.Inverse().Multiply(x).Equals(Fq12.Nil.One(17)));
    }

    [Fact]
    public void ExtensionEquality_FirstEqualsElement()
    {
        Assert.True(j.Equals(a.Add(a.Multiply(c))));
    }

    [Fact]
    public void ExtensionEquality_SecondDoesNotEqualElement()
    {
        Assert.False(j2.Equals(a.Add(a.Multiply(c))));
    }

    [Fact]
    public void ExtensionEquality_FirstDoesNotEqualSecond()
    {
        Assert.False(j.Equals(j2));
    }

    [Fact]
    public void ValueTests()
    {
        // values as returned by the TypeScript implementation
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", a.ToHex());
        Assert.Equal("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", b.ToHex());
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", c.ToHex());
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", g.ToHex());
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c", h.ToHex());
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", i.ToHex());
    }

    [Fact]
    public void PromotionToFq2_Yields_CorrectResults()
    {
        // values as returned by the TypeScript implementation
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", a.ToHex());
        Assert.Equal("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d", c.ToHex());

        var a_mult_c = a.Multiply(c);
        Assert.True(a_mult_c is Fq2);
        Assert.Equal("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", a_mult_c.ToHex());
    }

    [Fact]
    public void FirstEqualsElement()
    {
        Assert.True(j.Equals(a.Add(a.Multiply(c))));
    }

    [Fact]
    public void SecondDoesNotEqualElement()
    {
        Assert.False(j2.Equals(a.Add(a.Multiply(c))));
    }

    [Fact]
    public void FirstDoesNotEqualSecond()
    {
        Assert.False(j.Equals(j2));
    }
}